# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "fedora/24-cloud-base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory on the VM:
    vb.memory = 4096
    vb.cpus = 3
  end

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", inline: <<-SHELL
    set -o errexit
    set -o nounset
    set -o pipefail

    # Ensure system is up-to-date.
    dnf -qy upgrade

    # Ensure some useful packages are installed.
    PKGS=(
      bash-completion
      docker
      git
      libffi-devel
      openssl-devel
      python-devel
      python-pip
      redhat-rpm-config
      tree
    )
    dnf -qy install "${PKGS[@]}"

    # Verify installed packages, except python-pip. Skip python-pip because it
    # gets upgraded later, and the installed files will differ from the
    # installed RPM, what could cause this line to fail on a second run. Verify
    # docker separately with `--nomode`, because after starting it for the first
    # time it changes permissions of /var/lib/docker. The expansion below is
    # intentionally unquoted, since all package names contain no space, and it
    # is an error to pass an empty argument "" to `rpm -V`.
    (shopt -sq extglob; rpm -V ${PKGS[@]/@(python-pip|docker)})
    rpm -V --nomode docker

    # Upgrade pip to the latest version.
    pip install -qU pip

    # Install Python packages.
    pip install -qU ansible ipython

    # Create Docker group...

    # Enable and start Docker service.
    systemctl enable docker --now

    #dnf clean all

    # TODO: setup device mapper for Docker
    # https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#/configure-direct-lvm-mode-for-production
    # https://github.com/openshift/vagrant-openshift/blob/dcbcb4dbd14ab036f8b5a59860715325beee3b45/lib/vagrant-openshift/action/install_origin_base_dependencies.rb#L247-L272
  SHELL
end
